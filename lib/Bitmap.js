// Copyright 1994-2024 the Barcode Server Authors (Dan Bornstein et alia).
// SPDX-License-Identifier: Apache-2.0

/**
 * Simple bitmap class.
 */
export class Bitmap {
  /** @type {number} Width in pixels. */
  #width;

  /** @type {number} Height in pixels. */
  #height;

  /** @type {number} Width in bytes. */
  #widthBytes;

  /** @type {Uint8Array} Buffer containing the bytes of the bitmap. */
  #buffer;

  /**
   * Constructs an instance.
   *
   * @param {number} width Width in pixels.
   * @param {number} height Height in pixels.
   * @param {?Uint8Array} [buffer = null] Pre-constructed buffer to use, if any.
   */
  constructor(width, height, buffer = null) {
    this.#width      = Math.trunc(width);
    this.#height     = Math.trunc(height);
    this.#widthBytes = (this.#width + 7) >> 3;
    this.#buffer     = (buffer === null)
      ? new Uint8Array(this.#height * this.#widthBytes)
      : buffer;
  }

  /** @returns {number} The height in pixels. */
  get height() {
    return this.#height;
  }

  /** @returns {number} The width in pixels. */
  get width() {
    return this.#width;
  }

  /**
   * Copies this instance's data into an `ImageData` object, at coordinates
   * `(0, 0)`.
   *
   * @param {ImageData} dest The object to copy into.
   */
  copyIntoImageData(dest) {
    const destWidth = dest.width;
    const destData  = dest.data;

    for (let y = 0; y < this.#height; y++) {
      const lineIndex = y * destWidth * 4; // `4`: Each pixel is four bytes.
      for (let x = 0; x < this.#width; x++) {
        const index = lineIndex + (x * 4);
        const value = this.get(x, y) ? 0 : 255;
        destData[index + 0] = value;
        destData[index + 1] = value;
        destData[index + 2] = value;
        destData[index + 3] = 255;
      }
    }
  }

  /**
   * Gets the bit value at the given coordinates.
   *
   * @param {number} x The x coordinate.
   * @param {number} y The y coordinate.
   * @returns {number} The corresponding bit value.
   */
  get(x, y) {
    const xByte = x >> 3;
    const xBit  = x & 0x7;
    const value = this.#getByte(xByte, y);

    return (value >> xBit) & 1;
  }

  /**
   * Sets the bit value at the given coordinates.
   *
   * @param {number} x The x coordinate.
   * @param {number} y The y coordinate.
   * @param {number} value The bit value for the pixel.
   */
  set(x, y, value) {
    if (   (x < 0) || (x >= this.#width)
        || (y < 0) || (y >= this.#height)) {
      // Out of range. Ignore.
      return;
    }

    const xByte = x >> 3;
    const xBit  = x & 0x7;
    const index = (this.#widthBytes * y) + xByte;

    if (value) {
      this.#buffer[index] |= 1 << xBit;
    } else {
      this.#buffer[index] &= ~(1 << xBit);
    }
  }

  /**
   * Copies the given rectangle to the given destination from the given source.
   *
   * @param {number} dx The destination x coordinate (in this instance).
   * @param {number} dy The destination y coordinate (in this instance).
   * @param {Bitmap} src The source instance.
   * @param {number} sx The source x coordinate.
   * @param {number} sy The source y coordinate.
   * @param {number} width The width to copy.
   * @param {number} height The height to copy.
   */
  copyRect(dx, dy, src, sx, sy, width, height) {
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        this.set(x + dx, y + dy, src.get(x + sx, y + sy));
      }
    }
  }

  /**
   * Draws a vertical line of `1` pixels.
   *
   * @param {number} x The x coordinate.
   * @param {number} y1 The starting y coordinate (inclusive).
   * @param {number} y2 The ending y coordinate (inclusive).
   */
  vlin(x, y1, y2) {
    for (let y = y1; y <= y2; y++) {
      this.set(x, y, 1);
    }
  }

  /**
   * Draws the given 5x8 character at the given coordinates.
   *
   * @param {number} x The x coordinate.
   * @param {number} y The y coordinate.
   * @param {string|number} c The character to draw.
   */
  drawChar5x8(x, y, c) {
    const code    = (typeof c === 'number') ? c : c.charCodeAt(0);
    const clamped = ((code >= 32) && (code <= 127)) ? code : 32;
    this.copyRect(x, y, Bitmap.#FONT5X8_BITMAP, 0, clamped * 8, 5, 8);
  }

  /**
   * Draws a string of 5x8 characters at the given coordinates.
   *
   * @param {number} x The x coordinate.
   * @param {number} y The y coordinate.
   * @param {string} str The string to draw.
   */
  drawString5x8(x, y, str) {
    const origX = x;

    for (const c of str) {
      if (c === '\n') {
        x = origX;
        y += 8;
      } else {
        this.drawChar5x8(x, y, c);
        x += 5;
      }
    }
  }

  /**
   * Gets the byte value at the given byte-offset coordinates.
   *
   * @param {number} xByte The x coordinate in bytes.
   * @param {number} y The y coordinate.
   * @returns {number} The corresponding byte value.
   */
  #getByte(xByte, y) {
    if (   (xByte < 0) || (xByte >= this.#widthBytes)
        || (y < 0) || (y >= this.#height)) {
      // Out of range.
      return 0;
    }

    return this.#buffer[(this.#widthBytes * y) + xByte];
  }


  //
  // Static members
  //

  /** @type {Uint8Array} Font data buffer. */
  static #FONT5X8_BUFFER = Uint8Array.from([
    0x1e, 0x01, 0x06, 0x01, 0x1e, 0x00, 0x1e, 0x01, // 0x00
    0x06, 0x01, 0x1e, 0x00, 0x1e, 0x01, 0x1e, 0x01, // 0x01
    0x1e, 0x00, 0x01, 0x00, 0x1f, 0x08, 0x04, 0x08, // 0x02
    0x1f, 0x00, 0x11, 0x1f, 0x11, 0x00, 0x1f, 0x01, // 0x03
    0x01, 0x00, 0x1f, 0x04, 0x0a, 0x11, 0x00, 0x01, // 0x04
    0x00, 0x0e, 0x11, 0x11, 0x00, 0x0e, 0x11, 0x11, // 0x05
    0x0e, 0x00, 0x1f, 0x08, 0x04, 0x08, 0x1f, 0x00, // 0x06
    0x44, 0x41, 0x4e, 0x20, 0x42, 0x4f, 0x52, 0x4e, // 0x07
    0x53, 0x54, 0x45, 0x49, 0x4e, 0x21, 0x21, 0x00, // 0x08
    0x66, 0x6e, 0x6f, 0x72, 0x64, 0x00, 0x00, 0x00, // 0x09
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x0a
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x0b
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x0c
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x0d
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x0e
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x0f
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x10
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x11
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x12
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x13
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x14
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x15
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x16
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x17
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x18
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x19
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x1a
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x1b
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x1c
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x1d
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x1e
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, // 0x1f
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20
    0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x02, 0x00, // 0x21
    0x05, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x22
    0x05, 0x05, 0x0f, 0x05, 0x0f, 0x05, 0x05, 0x00, // 0x23
    0x02, 0x0f, 0x01, 0x0f, 0x08, 0x0f, 0x04, 0x00, // 0x24
    0x0b, 0x0b, 0x08, 0x06, 0x01, 0x0d, 0x0d, 0x00, // 0x25
    0x03, 0x05, 0x02, 0x05, 0x0d, 0x05, 0x0b, 0x00, // 0x26
    0x04, 0x04, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x27
    0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x00, // 0x28
    0x02, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x00, // 0x29
    0x00, 0x09, 0x06, 0x0f, 0x06, 0x09, 0x00, 0x00, // 0x2a
    0x00, 0x02, 0x02, 0x07, 0x02, 0x02, 0x00, 0x00, // 0x2b
    0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x06, 0x00, // 0x2c
    0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, // 0x2d
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, // 0x2e
    0x08, 0x08, 0x04, 0x06, 0x02, 0x01, 0x01, 0x00, // 0x2f
    0x0f, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0f, 0x00, // 0x30
    0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0f, 0x00, // 0x31
    0x0f, 0x09, 0x08, 0x0f, 0x01, 0x09, 0x0f, 0x00, // 0x32
    0x0f, 0x08, 0x08, 0x0f, 0x08, 0x08, 0x0f, 0x00, // 0x33
    0x09, 0x09, 0x09, 0x0f, 0x08, 0x08, 0x08, 0x00, // 0x34
    0x0f, 0x09, 0x01, 0x0f, 0x08, 0x09, 0x0f, 0x00, // 0x35
    0x03, 0x01, 0x01, 0x0f, 0x09, 0x09, 0x0f, 0x00, // 0x36
    0x0f, 0x09, 0x09, 0x0c, 0x04, 0x04, 0x04, 0x00, // 0x37
    0x0f, 0x09, 0x09, 0x0f, 0x09, 0x09, 0x0f, 0x00, // 0x38
    0x0f, 0x09, 0x09, 0x0f, 0x08, 0x08, 0x08, 0x00, // 0x39
    0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // 0x3a
    0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x06, 0x00, // 0x3b
    0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x00, // 0x3c
    0x00, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x00, 0x00, // 0x3d
    0x01, 0x02, 0x04, 0x08, 0x04, 0x02, 0x01, 0x00, // 0x3e
    0x0f, 0x09, 0x08, 0x0e, 0x02, 0x00, 0x02, 0x00, // 0x3f
    0x0f, 0x09, 0x0d, 0x0d, 0x0d, 0x01, 0x0f, 0x00, // 0x40
    0x0f, 0x09, 0x09, 0x0f, 0x09, 0x09, 0x09, 0x00, // 0x41
    0x07, 0x09, 0x09, 0x07, 0x09, 0x09, 0x07, 0x00, // 0x42
    0x0f, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0f, 0x00, // 0x43
    0x07, 0x09, 0x09, 0x09, 0x09, 0x09, 0x07, 0x00, // 0x44
    0x0f, 0x01, 0x01, 0x0f, 0x01, 0x01, 0x0f, 0x00, // 0x45
    0x0f, 0x01, 0x01, 0x0f, 0x01, 0x01, 0x01, 0x00, // 0x46
    0x0f, 0x01, 0x01, 0x0d, 0x09, 0x09, 0x0f, 0x00, // 0x47
    0x09, 0x09, 0x09, 0x0f, 0x09, 0x09, 0x09, 0x00, // 0x48
    0x07, 0x02, 0x02, 0x02, 0x02, 0x02, 0x07, 0x00, // 0x49
    0x0e, 0x04, 0x04, 0x04, 0x04, 0x05, 0x07, 0x00, // 0x4a
    0x09, 0x09, 0x09, 0x07, 0x09, 0x09, 0x09, 0x00, // 0x4b
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0f, 0x00, // 0x4c
    0x09, 0x0f, 0x0f, 0x0f, 0x09, 0x09, 0x09, 0x00, // 0x4d
    0x09, 0x0b, 0x0d, 0x09, 0x09, 0x09, 0x09, 0x00, // 0x4e
    0x0f, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0f, 0x00, // 0x4f
    0x0f, 0x09, 0x09, 0x0f, 0x01, 0x01, 0x01, 0x00, // 0x50
    0x0f, 0x09, 0x09, 0x09, 0x0b, 0x05, 0x0b, 0x00, // 0x51
    0x07, 0x09, 0x09, 0x07, 0x09, 0x09, 0x09, 0x00, // 0x52
    0x0f, 0x01, 0x01, 0x0f, 0x08, 0x08, 0x0f, 0x00, // 0x53
    0x0f, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, // 0x54
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0f, 0x00, // 0x55
    0x09, 0x09, 0x09, 0x09, 0x09, 0x05, 0x02, 0x00, // 0x56
    0x09, 0x09, 0x09, 0x09, 0x0f, 0x0f, 0x09, 0x00, // 0x57
    0x09, 0x09, 0x05, 0x06, 0x0a, 0x09, 0x09, 0x00, // 0x58
    0x09, 0x09, 0x09, 0x0f, 0x08, 0x08, 0x0f, 0x00, // 0x59
    0x0f, 0x08, 0x08, 0x06, 0x01, 0x01, 0x0f, 0x00, // 0x5a
    0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x00, // 0x5b
    0x01, 0x01, 0x02, 0x06, 0x04, 0x08, 0x08, 0x00, // 0x5c
    0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x07, 0x00, // 0x5d
    0x02, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x5e
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, // 0x5f
    0x02, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x60
    0x00, 0x00, 0x0f, 0x08, 0x0f, 0x09, 0x0f, 0x00, // 0x61
    0x01, 0x01, 0x0f, 0x09, 0x09, 0x09, 0x0f, 0x00, // 0x62
    0x00, 0x00, 0x0f, 0x01, 0x01, 0x01, 0x0f, 0x00, // 0x63
    0x08, 0x08, 0x0f, 0x09, 0x09, 0x09, 0x0f, 0x00, // 0x64
    0x00, 0x00, 0x0f, 0x09, 0x0f, 0x01, 0x0f, 0x00, // 0x65
    0x0e, 0x02, 0x0f, 0x02, 0x02, 0x02, 0x02, 0x00, // 0x66
    0x00, 0x00, 0x0f, 0x09, 0x09, 0x0f, 0x08, 0x0c, // 0x67
    0x01, 0x01, 0x0f, 0x09, 0x09, 0x09, 0x09, 0x00, // 0x68
    0x02, 0x00, 0x03, 0x02, 0x02, 0x02, 0x07, 0x00, // 0x69
    0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x05, 0x07, // 0x6a
    0x01, 0x01, 0x09, 0x05, 0x03, 0x05, 0x09, 0x00, // 0x6b
    0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x07, 0x00, // 0x6c
    0x00, 0x00, 0x09, 0x0f, 0x0f, 0x09, 0x09, 0x00, // 0x6d
    0x00, 0x00, 0x0f, 0x09, 0x09, 0x09, 0x09, 0x00, // 0x6e
    0x00, 0x00, 0x0f, 0x09, 0x09, 0x09, 0x0f, 0x00, // 0x6f
    0x00, 0x00, 0x0f, 0x09, 0x09, 0x0f, 0x01, 0x01, // 0x70
    0x00, 0x00, 0x0f, 0x09, 0x09, 0x0f, 0x08, 0x08, // 0x71
    0x00, 0x00, 0x0f, 0x01, 0x01, 0x01, 0x01, 0x00, // 0x72
    0x00, 0x00, 0x0f, 0x01, 0x0f, 0x08, 0x0f, 0x00, // 0x73
    0x00, 0x02, 0x0f, 0x02, 0x02, 0x02, 0x0e, 0x00, // 0x74
    0x00, 0x00, 0x09, 0x09, 0x09, 0x09, 0x0f, 0x00, // 0x75
    0x00, 0x00, 0x09, 0x09, 0x09, 0x05, 0x02, 0x00, // 0x76
    0x00, 0x00, 0x09, 0x09, 0x0f, 0x0f, 0x09, 0x00, // 0x77
    0x00, 0x00, 0x09, 0x09, 0x06, 0x09, 0x09, 0x00, // 0x78
    0x00, 0x00, 0x09, 0x09, 0x09, 0x0f, 0x08, 0x0c, // 0x79
    0x00, 0x00, 0x0f, 0x08, 0x06, 0x01, 0x0f, 0x00, // 0x7a
    0x08, 0x04, 0x04, 0x02, 0x04, 0x04, 0x08, 0x00, // 0x7b
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, // 0x7c
    0x01, 0x02, 0x02, 0x04, 0x02, 0x02, 0x01, 0x00, // 0x7d
    0x00, 0x0a, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x7e
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00  // 0x7f
  ]);

  /** @type {Bitmap} Instance of this class which holds the font data. */
  static #FONT5X8_BITMAP = new Bitmap(8, 1024, this.#FONT5X8_BUFFER);
}
